import React, { useState } from 'react';
import * as fs from 'fs';

interface Props {}
interface FileProps {
  file: File;
  code: string;
}
const FileInput: React.FC<Props> = () => {
  const [files, setFiles] = useState<FileProps[]>([]);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = event.target.files;
    if (!selectedFiles) return;

    const fileArray: FileProps[] = [];
    for (let i = 0; i < selectedFiles.length; i++) {
      const file = selectedFiles.item(i);
      if (!file) continue;
      if (file.type !== 'image/svg+xml') {
        alert(`${file.name} is not an SVG file`);
        continue;
      }
      const reader = new FileReader();
      reader.readAsText(file);
      reader.onload = () => {
        fileArray.push({file, code: reader.result as string});
        if(fileArray.length === selectedFiles.length) {
            setFiles(fileArray);
            fileArray.forEach(({file, code}) => {
                const componentName = file.name.split('.')[0];
                const filePath = `./src/components/${componentName}.tsx`;
                const componentContent = `import React from 'react';
                export default function ${componentName}() {
                  return (
                    ${code}
                  );
                }`;
                fs.writeFile(filePath, componentContent, 'utf8', (err) => {
                  if (err) {
                    console.error(err);
                    return;
                  }
                  console.log(`${componentName}.tsx file has been created!`);
                });
              });
        }
      }
    }
  }

  const handleDownload = (fileName: string) => {
    const componentPath = `./src/components/${fileName}.tsx`;
    fs.readFile(componentPath, (err, data) => {
if (err) {
console.error(err);
return;
}
const file = new Blob([data], {type: 'application/javascript'});
const fileUrl = URL.createObjectURL(file);
const link = document.createElement('a');
link.href = fileUrl;
link.download = ${fileName}.tsx;
link.click();
});
}

return (
<>
<input type="file" onChange={handleFileChange} multiple={true} accept="image/svg+xml" />
{files.map((file, index) => (
<div key={index}>
<p>File selected: {file.file.name}</p>
<button onClick={() => handleDownload(file.file.name.split('.')[0])}>
Download {file.file.name}
</button>
<pre>
{file.code}
</pre>
</div>
))}
</>
);
}
export default FileInput;